/*
 * Sets up the model with client-side metadata 
 * and any other model extensions we need (none so far)
 */
(function (){
    'use strict';
    angular.module('app').factory('model', service);

    service.$inject = ['$log', '$q', 'breeze'];
    function service($log, $q, breeze){
        var model =  {
            setModel: setModel
        };
        return model;
        //////////////////////

        function setModel(manager) {
            // could do more to the model but we don't in this example
            addClientMetadata(manager);
        }

        function addClientMetadata(manager) {
            var DT = breeze.DataType;
            var store = manager.metadataStore;
            var helper = new breeze.config.MetadataHelper(
                'Model', 
                breeze.AutoGeneratedKeyType.Identity);

            // Associate the metadata with the manager's data service
            store.addDataService(manager.dataService);

            addCategoryType();
            addProductType();

            function addCategoryType() {
                var entityType = {
                    name: "Category",
                    defaultResourceName: "Categories",
                    dataProperties: {
                        categoryId:  { type: DT.Int32, key: true },
                        displayName: { max: 50, required: true },
                        parentCategoryId: { type: DT.Int32 }
                    },
                    navigationProperties: {
                        parentCategory: {
                            entityTypeName: "Category",
                            associationName: "Category_Category",
                            foreignKeyNames: ["parentCategoryId"]
                        },
                        children: {
                            entityTypeName: "Category",
                            isScalar: false,
                            associationName: "Category_Category",
                        },
                        products: {
                            entityTypeName: "Product",
                            isScalar: false,
                            associationName: "Product_Category",
                        }
                    }
                };

                helper.addTypeToStore(store, entityType);

                return entityType;
            }

            function addProductType() {
                var entityType = {
                    name: "Product",
                    defaultResourceName: "Products",
                    dataProperties: {
                        productId:    { type: DT.Int32, key: true },
                        displayName:  { max: 50, required: true },
                        description:  { max: 300, required: true },
                        msrp:         { type: DT.Decimal, required: true},
                        currentPrice: { type: DT.Decimal, required: true },
                        imageUrl:     { },
                        categoryId:   { type: DT.Int32, required: true }
                    },
                    navigationProperties: {
                        category: {
                            entityTypeName: "Category",
                            associationName: "Product_Category",
                            foreignKeyNames: ["categoryID"]
                        }
                    }
                };

                helper.addTypeToStore(store, entityType);

                function Product() { }
                Object.defineProperty(Product.prototype, 'Savings', {
                    get: function () { return this.msrp - this.currentPrice; }
                });
                store.registerEntityTypeCtor('Product', Product);

                return entityType;
            }
        }
    }
})();
